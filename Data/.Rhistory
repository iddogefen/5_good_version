knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
rm(list=ls(all=TRUE))
# Load libraries
library(rstanarm)
library(knitr)
library(R.matlab)
library(cowplot)
library(reshape2)
library(gridExtra)
library(readr)
library(mosaic)
library(dplyr)
library(tidyr)
library(GGally)
library(rstanarm)
library(bayesplot)
library(arm)
library(stringr)
library(ggplot2)
#library(Rmisc)
# Set working directory
data_foldername = "~/Dropbox/NatalieFolder/Columbia_University/2.Natalie/Shohamy_Lab/Research/Counterfactuals_project/Art_experiment/Java_experiment/Version2/Data"
setwd(data_foldername)
analysis_foldername = "~/Dropbox/NatalieFolder/Columbia_University/2.Natalie/Shohamy_Lab/Research/Counterfactuals_project/Art_experiment/Java_experiment/Version2/Analysis"
#opts_knit$set(root.dir = data_foldername)
# Assign general theme for plots
theme <- theme(plot.title = element_text(hjust = 0.5, size = 14),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12, color = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.spacing.x = unit(0.2,'cm'),
axis.line = element_line(size = 0.8),
axis.ticks = element_blank(),
aspect.ratio = 2/3)
#panel.border = element_rect(color = "black", fill = NA, size = 1))
# Saving plots parameters
date = unlist(strsplit(date(), " "))
fig_date = paste0(date[3],date[2],date[5])
Save_plots = 1
fig_size = c(10,10)
fig_type = "png" # or eps
# Do we want to exclude no learners from final decisions analysis
Exclude = 0
# Which experimental group to analyze
analyze_groups <- c("d06182019","d07032019","d06172019")
# ----------- data -----------
files_data = list.files("Individual_data/",pattern="*.csv")
# First apply read.csv, then rbind
all_data = do.call(rbind, lapply(files_data,
function(x) read.csv(paste0("Individual_data/",x), stringsAsFactors = FALSE)))
# Transform all "null" values to "NA"
all_data[all_data == "null"] = NA
# Divide rt by 1000 to get secs
all_data$rt <- as.numeric(as.character(all_data$rt))/1000
all_data$rt_pairs <- as.numeric(as.character(all_data$rt_pairs))/1000
all_data$rt_object <- as.numeric(as.character(all_data$rt_object))/1000
all_data$register_reward_rt <- as.numeric(as.character(all_data$register_reward_rt))/1000
all_data$see_reward_rt <- as.numeric(as.character(all_data$see_reward_rt))/1000
# add experimental group to all_data
exp_groups <- subset(all_data[all_data$trial_index==0,c("PID","start_time")], !is.na(start_time))
exp_groups$group <- str_sub(exp_groups$start_time, 1, 9)
all_data <- left_join(all_data, exp_groups[,c("PID", "group")], by="PID")
# Divide trials according to phase type per subject
# (this will make it easier to verify where blurs and focus events occured)
start_phase_category <- c("full_screen","rating_instructions", "deliberation_instructions","reward_learning_instructions", "final_decisions_instructions", "memory_test_instructions", "regret_intro","debreif_age","debreif_end")
phase_category <- c("enter_full_screen","rating","deliberation","reward_learning","final_decisions","memory_test","regret","debreif")
subs <- unique(all_data$PID)
for (s in 1:length(subs)){
for (i in 1:length(phase_category)){
start_ind <- which(all_data$PID==subs[s] & all_data$category==start_phase_category[i])[1]
end_ind <- which(all_data$PID==subs[s] & all_data$category==start_phase_category[i+1])[1]
all_data[c(start_ind:end_ind),"phase"] <- phase_category[i]
}
}
# ----------- interactive data -----------
files_data_int = list.files("Interactive_data/",pattern="*.csv")
all_data_int = do.call(rbind, lapply(files_data_int,
function(x) read.csv(paste0("Interactive_data/",x), stringsAsFactors = FALSE)))
all_data_int <- left_join(all_data_int, exp_groups[,c("PID", "group")], by="PID")
# Add phase type in interactive data
subs <- unique(all_data_int$PID)
for (s in 1:length(subs)){
sub_data <- subset(all_data,PID==subs[s])
all_data_int$phase[all_data_int$PID==subs[s]] <-
sub_data$phase[c(all_data_int$trial[all_data_int$PID==subs[s]])+1]
}
# ----------- subjects log -----------
subs_log <- read.csv("subs_log/subs_log.csv", stringsAsFactors = FALSE)
# --------- Rating ---------
rating <- all_data[all_data$category=="rating" & all_data$group %in% analyze_groups,
c("PID","category","index","stimulus_id","response","rt","group")]
# z-score ratings per subject
rating <- rating %>% group_by(PID) %>% mutate(normalized_rating = (response - mean(response))/sd(response))
# --------- Deliberation ---------
deliberation_all <- all_data[all_data$category=="deliberation" & all_data$group %in% analyze_groups,
c("PID","category","block","index","reward_type","stimulus_left","stimulus_right",
"rating_left","rating_right","left_chosen","rt","chosen_obj",
"unchosen_obj","explain_trial","explain_response","group")]
# tag all trials that repeated themselves because no response was given for 10 seconds, then only keep the last trial
deliberation_all$number_of_no_responses <- 0
tag_no_response <- 0
for (i in 1:nrow(deliberation_all)-1){
tag_no_response[i] <- ifelse(deliberation_all$index[i]==deliberation_all$index[i+1], 1, 0)
deliberation_all$number_of_no_responses[i] <-
sum(tag_no_response[deliberation_all$index==deliberation_all$index[i]], na.rm = 1)
}
deliberation_all <- subset(deliberation_all, !is.na(left_chosen))
# add explain_trial response to relevant deliberation trial
deliberation_all$explain_response[deliberation_all$explain_tria==1] <-
subset(all_data,category=="explain_trial")[,"explain_response"]
# add normalazied delta rate
for (i in 1:nrow(deliberation_all)){
rating_sub <- subset(rating, PID==deliberation_all$PID[i])
deliberation_all$rate_left[i] <-
rating_sub$normalized_rating[which(deliberation_all$stimulus_left[i]==rating_sub$stimulus_id)]
deliberation_all$rate_right[i] <-
rating_sub$normalized_rating[which(deliberation_all$stimulus_right[i]==rating_sub$stimulus_id)]
deliberation_all$norm_delta_rate[i] <- deliberation_all$rate_left[i] - deliberation_all$rate_right[i]
}
deliberation_all$delta_rate <- deliberation_all$rating_left - deliberation_all$rating_right
# add a column counting how many times an object was chosen before the thrid block
subs <- unique(deliberation_all$PID)
deliberation_all$choice_consistency <- NaN
final_block <- 3
for (s in 1:length(subs)){
sub_data_final_block <- deliberation_all[deliberation_all$PID==subs[s] & deliberation_all$block==final_block,]
sub_data_first_blocks <- deliberation_all[deliberation_all$PID==subs[s] & deliberation_all$block!=final_block,]
choice_consistency <- NaN
for (i in 1:nrow(sub_data_final_block)){
choice_consistency[i] <- sum(sub_data_final_block[i,"chosen_obj"] == sub_data_first_blocks$chosen_obj)
}
deliberation_all$choice_consistency[deliberation_all$PID==subs[s] & deliberation_all$block==final_block] <- choice_consistency
}
# --------- Reward learning ---------
# we use "see reward" trials, and then add to the data missing info from reward outcome trials
reward_learning <- all_data[(all_data$category=="see_reward" & all_data$group %in% analyze_groups),c("PID","category","block","index","stimulus_id","reward_type","reward_amount",
"see_reward_rt","register_reward_response","register_reward_rt","group")]
# because the reward outcome is presented for all trials, number and order of trials for both types of trials is identical. we can just copy the rt and resposes of the reward_outcome trialsd
reward_learning$register_reward_rt <- all_data[all_data$category=="reward_outcome" & all_data$group %in% analyze_groups ,"register_reward_rt"]
reward_learning$register_reward_response <- all_data[all_data$category=="reward_outcome" & all_data$group %in% analyze_groups,"register_reward_response"]
reward_learning$accuracy <- ifelse(reward_learning$register_reward_response==reward_learning$reward_type,1,0)
# --------- final decisions ---------
final_decisions_all <- all_data[all_data$category=="final_decisions" & all_data$group %in% analyze_groups,
c("PID","category","block","index","stimulus_left","stimulus_right","reward_type_left",
"reward_type_right","chosen_trial","left_chosen","rt","higher_outcome_chosen",
"group")]
final_decisions_all$higher_outcome_chosen[is.na(final_decisions_all$left_chosen)] <- NA
# add delta value
for (i in 1:nrow(final_decisions_all)){
rating_sub <- subset(rating, PID==final_decisions_all$PID[i])
final_decisions_all$norm_rate_left[i] <-
rating_sub$normalized_rating[which(final_decisions_all$stimulus_left[i]==rating_sub$stimulus_id)]
final_decisions_all$norm_rate_right[i] <-
rating_sub$normalized_rating[which(final_decisions_all$stimulus_right[i]==rating_sub$stimulus_id)]
final_decisions_all$norm_delta_rate[i] <- final_decisions_all$norm_rate_left[i] - final_decisions_all$norm_rate_right[i]
}
# Add whether gain was the left item
final_decisions_all$gain_left <- ifelse(final_decisions_all$reward_type_left==1,1,0)
# Define identity of chosen, unchosen and gain objects per trial
final_decisions_all$chosen_obj <- ifelse(final_decisions_all$left_chosen,
final_decisions_all$stimulus_left,final_decisions_all$stimulus_right)
final_decisions_all$unchosen_obj <- ifelse(final_decisions_all$left_chosen,
final_decisions_all$stimulus_right,final_decisions_all$stimulus_left)
final_decisions_all$gain_obj <- ifelse(final_decisions_all$gain_left,
final_decisions_all$stimulus_left,final_decisions_all$stimulus_right)
final_decisions_all$loss_obj <- ifelse(final_decisions_all$gain_left,
final_decisions_all$stimulus_right,final_decisions_all$stimulus_left)
# Add delta rate by outcome
final_decisions_all$norm_drate_by_outcome <- ifelse(final_decisions_all$gain_left==1,
final_decisions_all$norm_rate_left-final_decisions_all$norm_rate_right,
final_decisions_all$norm_rate_right-final_decisions_all$norm_rate_left)
# Add 9 bins for delta value
final_decisions_all <- final_decisions_all %>%
mutate(binned_norm_delta_value = cut_number(norm_drate_by_outcome, 9, dig.lab=1))
# center chosen trial (instead of using 0 and 1, use -1 and 1 for ease in interpretation of model coefs)
final_decisions_all$chosen_trial_centered <- ifelse(final_decisions_all$chosen_trial==0,-1,1)
final_decisions_all$chosen_trial_name <- ifelse(final_decisions_all$chosen_trial==1,"Chosen pairs","Unchosen pairs")
# --------- memory ---------
memory <- all_data[all_data$category=="memory_pairs" & all_data$group %in% analyze_groups,
c("PID","category","index","old_pair","stimulus_left","stimulus_right","old_response",
"rt_pairs","chosen_object","left_object_chosen","rt_object","group")]
# add object choice and rt to memory matrix
memory$left_object_chosen[memory$old_response==1] <-
all_data$left_object_chosen[all_data$category=="memory_chosen_object"]
memory$rt_object[memory$old_response==1] <-
all_data$rt_object[all_data$category=="memory_chosen_object"]
# add accuracy columns
memory$chosen_object_response <- ifelse(memory$old_response==1, ifelse(memory$left_object_chosen==1,
memory$stimulus_left,memory$stimulus_right),NA)
memory$pair_acc <- ifelse(memory$old_pair==memory$old_response,1,0)
memory$object_acc <- ifelse(memory$old_response==1,
ifelse(is.na(memory$chosen_object==memory$chosen_object_response) | (memory$chosen_object==memory$chosen_object_response)==0,0,1),NaN)
# ---------  Add Stimuli identity to data frame ---------
# add stimuli identify from javascript stimuli list
# javascript code: col0 = Stimuli.map(function(value,index) { return value[0]; });
Stimuli <- data.frame(stimulus = c("Grigb1.jpg", "Rohla1.jpg", "Pica1n.jpg", "Kupkb1.jpg", "Clib1n.jpg", "Maca1n.jpg", "Kline1.jpg", "Vincb1.jpg", "Monb1n.jpg", "Picd1n.jpg", "Vincc1.jpg", "Kupc1n.jpg", "Klic1n.jpg", "Lewa1n.jpg", "Clifa1.jpg", "Kupkc1.jpg", "Gustb1.jpg", "Klid1n.jpg", "Lassa1.jpg", "Pice1n.jpg", "Picb1n.jpg", "Picae1.jpg", "Macka1.jpg", "Vina1n.jpg", "Clia1n.jpg", "Picad1.jpg", "Lassc1.jpg", "Klib1n.jpg", "Mona1n.jpg", "Rohlb1.jpg", "Lewb1n.jpg", "Klinb1.jpg", "Krasa1.jpg", "Gustc1.jpg", "Clifb1.jpg", "Picab1.jpg", "Lewia1.jpg", "Roha1n.jpg", "Lasc1n.jpg", "Picc1n.jpg", "Kupka1.jpg", "Kraa1n.jpg", "Lasb1n.jpg", "Klie1n.jpg", "Dekoa1.jpg", "Mackc1.jpg", "Gusc1n.jpg", "Macb1n.jpg", "Gusa1n.jpg", "Mondb1.jpg", "Klina1.jpg", "Krab1n.jpg", "Vinca1.jpg", "Deka1n.jpg", "Macc1n.jpg", "Lewic1.jpg", "Monda1.jpg", "Klinc1.jpg", "Vinc1n.jpg", "Vinb1n.jpg", "Picac1.jpg", "Kupb1n.jpg", "Lewc1n.jpg", "Krasb1.jpg", "Picaa1.jpg", "Dekob1.jpg", "Grib1n.jpg", "Mackb1.jpg", "Dekb1n.jpg", "Klind1.jpg"),
index = c(61, 54, 5, 32, 56, 48, 33, 64, 0, 8, 16, 60, 50, 24, 11, 21, 36, 26, 57, 28, 20, 41, 59, 47, 55, 69, 15, 3, 62, 23, 46, 29, 38, 27, 43, 67, 63, 65, 45, 19, 13, 30, 34, 12, 52, 42, 6, 7, 35, 68, 22, 18, 66, 37, 53, 51, 1, 58, 40, 10, 31, 39, 49, 4, 17, 25, 14, 44, 2, 9))
# keep only the three first letters of each painting for painter identification
Stimuli$painter <- substring(Stimuli$stimulus,first=1,last=3)
# Add to relevant data frames
for (i in 1:nrow(deliberation_all)){
deliberation_all$painting_chosen[i] <-
as.character(Stimuli$stimulus[Stimuli$index==deliberation_all$chosen_obj[i]])
deliberation_all$painting_unchosen[i] <-
as.character(Stimuli$stimulus[Stimuli$index==deliberation_all$unchosen_obj[i]])
deliberation_all$painter_chosen[i] <- Stimuli$painter[Stimuli$index==deliberation_all$chosen_obj[i]]
deliberation_all$painter_unchosen[i] <- Stimuli$painter[Stimuli$index==deliberation_all$unchosen_obj[i]]
deliberation_all$same_painter[i] <-
ifelse(deliberation_all$painter_chosen[i]==deliberation_all$painter_unchosen[i],1,0)
}
for (i in 1:nrow(final_decisions_all)){
final_decisions_all$painting_chosen[i] <-
as.character(Stimuli$stimulus[Stimuli$index==final_decisions_all$chosen_obj[i]])
final_decisions_all$painting_unchosen[i] <-
as.character(Stimuli$stimulus[Stimuli$index==final_decisions_all$unchosen_obj[i]])
final_decisions_all$painting_gain[i] <-
as.character(Stimuli$stimulus[Stimuli$index==final_decisions_all$gain_obj[i]])
final_decisions_all$painter_chosen[i] <- Stimuli$painter[Stimuli$index==final_decisions_all$chosen_obj[i]]
final_decisions_all$painter_unchosen[i] <- Stimuli$painter[Stimuli$index==final_decisions_all$unchosen_obj[i]]
final_decisions_all$painter_gain[i] <- Stimuli$painter[Stimuli$index==final_decisions_all$gain_obj[i]]
final_decisions_all$same_painter[i] <-
ifelse(final_decisions_all$painter_chosen[i]==final_decisions_all$painter_unchosen[i],1,0)
}
mturk_unusual_subs <- c("qHtbZ","ixfzf","BVBqL","NW0Ab") # c("BVBqL","NW0Ab")
up_bias <- subset(final_decisions_all,chosen_trial==1) %>% na.omit() %>% group_by(PID) %>% summarize(upward_bias = mean(higher_outcome_chosen))
up_bias_cutoff <- 0.75
up_bias$learners <- ifelse(up_bias$upward_bias>up_bias_cutoff,1,0)
up_bias$mturk <- ifelse(up_bias$PID %in% mturk_unusual_subs,0,1)
exclude_subs <- unique(c(mturk_unusual_subs,up_bias$PID[up_bias$learners==0]))
p9 <- ggplot(up_bias, aes(x=upward_bias)) + geom_histogram(binwidth=0.005) +
geom_vline(xintercept = up_bias_cutoff, size=1, linetype="dashed", color = "cadetblue") +
labs(title = "Removal of subjects", x = "Upward bias\nP(choose Gain)", y = "Counts") +
theme + scale_x_continuous(expand = c(0, 0), limits = c(0,1.05), breaks=c(0,0.5,up_bias_cutoff,1)) +
scale_y_continuous(expand = c(0, 0)) +
annotate("text", x=up_bias_cutoff, y=6, label="Exclusion cutoff", color='black', size=6) +
annotate("text", x=0.25, y=6, size=5,
label=sprintf("%d subs did not learn the rewards well\n%d subs had unusual events on mturk,\nout of which %d were no-learners",
sum(up_bias$learners==0),sum(up_bias$mturk==0),
sum(up_bias$mturk==0 & up_bias$learners==0),length(exclude_subs)))
print(p9)
if (Save_plots==1){ggsave(filename=sprintf("%s/Plots/FinalDecisions1.%s",analysis_foldername,fig_type),
plot = p9,width=fig_size[1],height=fig_size[2])}
# Remove subjects
if (Exclude == 1){
final_decisions <- subset(final_decisions_all,!PID %in% exclude_subs)
} else {
final_decisions <- subset(final_decisions_all, !PID %in% mturk_unusual_subs)
}
pair_acc <- memory %>% group_by(PID) %>%
summarize(pair_acc = mean(pair_acc)) %>%
mutate(pair_acc_zscored = zscore(pair_acc))
final_decisions_memory <- left_join(final_decisions,pair_acc,by="PID")
load(pasteanalysis_foldername,"/Models/model_V2M2_2000itr.RData"))
load(analysis_foldername,"/Models/model_V2M2_2000itr.RData"))
analysis_foldername
load(paste0(analysis_foldername,"/Models/model_V2M2_2000itr.RData"))
source(sprinsf("%s/model_functions.R",analysis_foldername))
source(sprintf("%s/model_functions.R",analysis_foldername))
coefs_namesM2_tmp <- rownames(as.data.frame(fixef(M2)));
coefs_namesM2_ratings <- coefs_namesM2_tmp[c(1,2,3,5,4,6,7,8)]
coefs_namesM2_memory <-  coefs_namesM2_tmp[c(1,2,4,6,3,5,7,8)]
coefs_signsM2 <- data.frame(Chosen_Pairs = c(1,1,1,1,1,1,1,1),
Unchosen_Pairs = c(1,-1,1,-1,1,-1,1,-1))
coef_listM2_ratings <- create_df_coefs(M2, coefs_namesM2_ratings, coefs_signsM2)
coef_listM2_memory <- create_df_coefs(M2, coefs_namesM2_memory, coefs_signsM2)
#
final_decisions_memory_subset <- final_decisions_memory[!is.na(final_decisions_memory$left_chosen),
c("PID","higher_outcome_chosen","chosen_trial_centered","pair_acc_zscored","norm_drate_by_outcome")]
test <- posterior_predict(M2, newdata=final_decisions_memory_subset, draws=100)
dim(test)
y_tilde <- posterior_predict(M2, newdata=final_decisions_memory_subset, draws=100)
test <- lapply(y_tilde,function(x){posterior_interval(x)})
test <- lapply(y_tilde,function(x){posterior_interval(as.matrix(x))})
test <- lapply(t(y_tilde),function(x){posterior_interval(as.matrix(x))})
posterior_interval(as.matrix(y_tilde[1,]))
median(y_tilde[1,])
median_y_tilde <- lapply(y_tilde,function(x){colMeans(x)}),
median_y_tilde <- lapply(y_tilde,function(x){colMeans(x)})
mean(y_tilde[1,])
colMeans(y_tilde[1,])
ncol(y_tilde)
mean_y_tilde <- lapply(y_tilde,function(x){mean(x)})
length(mean_y_tilde)
ncol(ytilde)
ncol(y_tilde)
y_tilde <- t(y_tilde) # transform the original matrix to 19093*100
ncol(y_tilde)
full_y_tilde <- cbind(final_decisions_memory_subset,y_tilde)
colnames(full_y_tilde)
subs <- unique(full_y_tilde$PID)
for (s in 1:length(subs)){
for (i in 1:n_drwas)
predicted_upbias_chosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
n_drwas <- 100
subs <- unique(full_y_tilde$PID)
for (s in 1:length(subs)){
for (i in 1:n_drwas)
predicted_upbias_chosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
predicted_upbias_chosen <- as.matrix(NaN,ncol=n_drwas,nrow=length(subs))
predicted_upbias_chosen
n_drwas
as.matrix(n_drwas,length(subs))
length(subs)
predicted_upbias_chosen <- as.matrix(n_drwas,length(subs))
predicted_upbias_unchosen <- as.matrix(n_drwas,length(subs))
for (s in 1:length(subs)){
for (i in 1:n_drwas)
predicted_upbias_chosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
matrix(n_drwas,length(subs))
predicted_upbias_chosen <- matrix(NaN,n_drwas,length(subs))
predicted_upbias_chosen
predicted_upbias_chosen <- matrix(NaN,n_drwas,length(subs))
predicted_upbias_unchosen <- matrix(NaN,n_drwas,length(subs))
subs <- unique(full_y_tilde$PID)
for (s in 1:length(subs)){
for (i in 1:n_drwas)
predicted_upbias_chosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
predicted_upbias_unchosen
predicted_upbias_chosen <- matrix(NaN,ncol=n_drwas,nrow=length(subs))
predicted_upbias_unchosen <- matrix(NaN,ncol=n_drwas,nrow=length(subs))
subs <- unique(full_y_tilde$PID)
for (s in 1:length(subs)){
for (i in 1:n_drwas)
predicted_upbias_chosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
predicted_upbias_chosen
ncol(predicted_upbias_chosen)
predicted_upbias_chosen <- matrix(NaN,ncol=n_drwas+1,nrow=length(subs))
predicted_upbias_unchosen <- matrix(NaN,ncol=n_drwas+1,nrow=length(subs))
subs <- unique(full_y_tilde$PID)
for (s in 1:length(subs)){
predicted_upbias_chosen$PID[s] <- subs[s]
predicted_upbias_unchosen$PID[s] <- subs[s]
for (i in 1:n_drwas){
predicted_upbias_chosen[s,i+1] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i+1] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
}
for (s in 1:length(subs)){
predicted_upbias_chosen[s,1] <- subs[s]
predicted_upbias_unchosen$PID[s,1] <- subs[s]
for (i in 1:n_drwas){
predicted_upbias_chosen[s,i+1] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i+1] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
}
s=1
predicted_upbias_chosen[s,1] <- subs[s]
predicted_upbias_unchosen$PID[s,1] <- subs[s]
for (s in 1:length(subs)){
predicted_upbias_chosen[s,1] <- subs[s]
predicted_upbias_unchosen[s,1] <- subs[s]
for (i in 1:n_drwas){
predicted_upbias_chosen[s,i+1] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i+1] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
}
predicted_upbias_chosen
predicted_upbias_chosen <- matrix(NaN,ncol=n_drwas,nrow=length(subs))
predicted_upbias_unchosen <- matrix(NaN,ncol=n_drwas,nrow=length(subs))
subs <- unique(full_y_tilde$PID)
for (s in 1:length(subs)){
for (i in 1:n_drwas){
predicted_upbias_chosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==1,i+5])
predicted_upbias_unchosen[s,i] <- mean(full_y_tilde[full_y_tilde$PID==subs[s] & full_y_tilde$chosen_trial_centered==-1,i+5])
}
}
predicted_upbias_chosen
rep(subs,times=2)
rep(c("Chosen pairs","Unchosen pairs"),length(subs))
rep(c("Chosen pairs","Unchosen pairs"),times=length(subs))
sort(rep(c("Chosen pairs","Unchosen pairs"),times=length(subs)))
colMedians()
predicted_upbias <- data.frame(PID = rep(subs,times=2),
choice = sort(rep(c("Chosen pairs","Unchosen pairs"),times=length(subs))),
median_upbias = c(lapply(predicted_upbias_chosen, function(x){median(predicted_upbias_chosen)}),
lapply(predicted_upbias_unchosen, function(x){median(predicted_upbias_unchosen)})),
CI_low = c(lapply(predicted_upbias_chosen, function(x){posterior_interval(as.matrix(predicted_upbias_chosen))[1]}),
lapply(predicted_upbias_unchosen, function(x){posterior_interval(as.matrix(predicted_upbias_unchosen))[1]})),
CI_high = c(lapply(predicted_upbias_chosen, function(x){posterior_interval(as.matrix(predicted_upbias_chosen))[2]}),
lapply(predicted_upbias_unchosen, function(x){posterior_interval(as.matrix(predicted_upbias_unchosen))[2]})))
rep(subs,times=2)
sort(rep(c("Chosen pairs","Unchosen pairs"),times=length(subs)))
rep(subs,times=2)
c(lapply(predicted_upbias_chosen, function(x){median(predicted_upbias_chosen)}),
lapply(predicted_upbias_unchosen, function(x){median(predicted_upbias_unchosen)}))
apply(predicted_upbias_chosen, 2, FUN = median)
apply(predicted_upbias_chosen,1,FUN=median)
lapply(predicted_upbias_chosen, function(x){posterior_interval(as.matrix(predicted_upbias_chosen))[1]})
install.packages("gmodels")
library(gmodels)
ci(predicted_upbias_chosen)
lapply(predicted_upbias_chosen,function(x){posterior_interval(x)})
lapply(predicted_upbias_chosen,function(x){posterior_interval(as.matrix(x))})
apply(predicted_upbias_chosen, 1, FUN=ci)
predicted_upbias <- data.frame(PID = rep(subs,times=2),
choice = sort(rep(c("Chosen pairs","Unchosen pairs"),times=length(subs))),
median_upbias = c(apply(predicted_upbias_chosen,1,FUN=median),apply(predicted_upbias_unchosen,1,FUN=median)),
CI_low = c(apply(predicted_upbias_chosen, 1, FUN=ci)[2],apply(predicted_upbias_unchosen, 1, FUN=ci)[2]),
CI_high = c(apply(predicted_upbias_chosen, 1, FUN=ci)[3],apply(predicted_upbias_unchosen, 1, FUN=ci)[3]))
warnings()
predicted_upbias
summary_data <- final_decisions_memory_subset %>% group_by(PID,chosen_trial_name) %>% summarize(data_upbias = mean(higher_outcome_chosen),
data_pair_acc = mean(pair_acc_zscored))
final_decisions_memory_subset
final_decisions_memory_subset$choice <- ifelse(final_decisions_memory_subset$chosen_trial_centered==1, "Chosen pairs", "Unchosen pairs")
summary_data <- final_decisions_memory_subset %>% group_by(PID,choice) %>% summarize(data_upbias = mean(higher_outcome_chosen),
data_pair_acc = mean(pair_acc_zscored))
full_predicted_upbias <- merge(summary_data,predicted_upbias, by=c("PID","choice"))
full_predicted_upbias
ggplot(data=full_predicted_upbias, aes(x=data_pair_acc,y=data_upbias,group=choice,color=choice)) + geom_point() +
geom_pointrange(mapping=aes(x=data_pair_acc, y=median_upbias, ymin=CI_low, ymax=CI_high, color=choice), alpha=0.5))
ggplot(data=full_predicted_upbias, aes(x=data_pair_acc,y=data_upbias,group=choice,color=choice)) + geom_point() +
geom_pointrange(mapping=aes(x=data_pair_acc, y=median_upbias, ymin=CI_low, ymax=CI_high, color=choice), alpha=0.5)
predicted_upbias
apply(predicted_upbias_chosen, 1, FUN=ci)
test <- apply(predicted_upbias_chosen, 1, FUN=ci)
test[1,2]
test[1]
test[1,]
test[2,]
test[3,]
test[4,]
predicted_upbias <- data.frame(PID = rep(subs,times=2),
choice = sort(rep(c("Chosen pairs","Unchosen pairs"),times=length(subs))),
median_upbias = c(apply(predicted_upbias_chosen,1,FUN=median),apply(predicted_upbias_unchosen,1,FUN=median)),
CI_low = c(apply(predicted_upbias_chosen, 1, FUN=ci)[2,],apply(predicted_upbias_unchosen, 1, FUN=ci)[2,]),
CI_high = c(apply(predicted_upbias_chosen, 1, FUN=ci)[3,],apply(predicted_upbias_unchosen, 1, FUN=ci)[3,]))
warnings()
full_predicted_upbias <- merge(summary_data,predicted_upbias, by=c("PID","choice"))
ggplot(data=full_predicted_upbias, aes(x=data_pair_acc,y=data_upbias,group=choice,color=choice)) + geom_point() +
geom_pointrange(mapping=aes(x=data_pair_acc, y=median_upbias, ymin=CI_low, ymax=CI_high, color=choice), alpha=0.5)
p_unchosen <- ggplot(data=subset(full_predicted_upbias,choice=="Unchosen pairs"),
aes(x=data_pair_acc,y=data_upbias,group=choice,color=PID)) + geom_point() +
geom_pointrange(mapping=aes(x=data_pair_acc, y=median_upbias, ymin=CI_low, ymax=CI_high, color=PID), alpha=0.5)
p_unchosen
ggplot(data=subset(full_predicted_upbias,choice=="Unchosen pairs"),
aes(x=data_pair_acc,y=data_upbias,group=choice,color=PID)) + geom_point() +
geom_pointrange(mapping=aes(x=data_pair_acc, y=median_upbias, ymin=CI_low, ymax=CI_high, color=PID), alpha=0.5) + theme(legend.position=element_blank())
# Plot
p_unchosen <- ggplot(data=subset(full_predicted_upbias,choice=="Unchosen pairs"),
aes(x=data_pair_acc,y=data_upbias,group=choice,color=PID)) + geom_point() +
geom_pointrange(mapping=aes(x=data_pair_acc, y=median_upbias, ymin=CI_low, ymax=CI_high, color=PID), alpha=0.5) + theme(legend.position="none")
p_unchosen
ggplot(data=full_predicted_upbias, aes(x=median_upbias,y=data_upbias,color=choice)) + geom_point() +
geom_smooth(method=lm, aes(color=choice))
ggplot(data=full_predicted_upbias, aes(x=median_upbias,y=data_upbias,color=choice)) + geom_point() +
geom_smooth(method=lm, aes(color=choice)) + theme + labs(xlab="Predicted upward bias",ylab="Mean upward bias", title="Predictive checks")
p_unchosen
full_predicted_upbias$within_interval <- ifelse(full_predicted_upbias$median_upbias<full_predicted_upbias$CI_high &
full_predicted_upbias$median_upbias>full_predicted_upbias$CI_low), 1, 0)
full_predicted_upbias$within_interval <- ifelse((full_predicted_upbias$median_upbias<full_predicted_upbias$CI_high) &
(full_predicted_upbias$median_upbias>full_predicted_upbias$CI_low), 1, 0)
View(full_predicted_upbias)
full_predicted_upbias$within_interval <- ifelse((full_predicted_upbias$data_upbias<full_predicted_upbias$CI_high) &
(full_predicted_upbias$data_upbias>full_predicted_upbias$CI_low), 1, 0)
ggplot(data=subset(full_predicted_upbias,choice=="Unchosen pairs"),
aes(x=data_pair_acc,y=data_upbias,group=choice,color=factor(within_interval))) + geom_point()
ggplot(data=subset(full_predicted_upbias,choice=="Unchosen pairs"),
aes(x=data_pair_acc,y=data_upbias,color=choice,shape=factor(within_interval))) + geom_point()
ggplot(data=subset(full_predicted_upbias,choice=="Unchosen pairs"),
aes(x=data_pair_acc,y=data_upbias,color=factor(within_interval))) + geom_point() +
geom_point(aes(x=data_pair_acc,y=median_upbias,color=factor(within_interval),shape=8))
ggplot(data=subset(full_predicted_upbias,choice=="Unchosen pairs"),
aes(x=data_pair_acc,y=data_upbias,color=factor(within_interval))) + geom_point() +
geom_point(aes(x=data_pair_acc,y=median_upbias,color=factor(within_interval)),shape=8)
apply(predicted_upbias_chosen,1, FUN=posterior_interval)
apply(as.matrix(predicted_upbias_chosen),1, FUN=posterior_interval)
apply(predicted_upbias_chosen,1, FUN=ci(confidence=0.95))
apply(predicted_upbias_chosen,1, FUN=ci)
posterior_interval(as.matrix(predicted_upbias_chosen[96,]))
predicted_upbias
